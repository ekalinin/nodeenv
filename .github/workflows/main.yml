name: CI

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  tests:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version:
        - 2.7
        - 3.7
        - 3.8
        - 3.9
        - '3.10'

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements-dev.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install --upgrade tox

    - name: Run tox targets for ${{ matrix.python-version }}
      run: |
        ENV_PREFIX=$(tr -C -d "0-9" <<< "${{ matrix.python-version }}")
        TOXENV=$(tox --listenvs | grep "^py$ENV_PREFIX" | tr '\n' ',') tox

    - name: Upload coverage data
      uses: actions/upload-artifact@v2
      with:
        name: coverage-data
        path: '.coverage.*'

  coverage:
    name: Coverage
    runs-on: ubuntu-20.04
    needs: tests
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: python -m pip install --upgrade coverage[toml]

      - name: Download data
        uses: actions/download-artifact@v2
        with:
          name: coverage-data

      - name: Combine coverage and fail if it's <100%
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=55

      - name: Upload HTML report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: htmlcov

  test-windows:
      name: Windows Test (Python 3:10)
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v2
        - name: Windows Install
          run: pip install .
        - name: Install + Run NodeJS
          run: |
            nodeenv --list
            nodeenv ./node
            ./node/bin/node --version

  docker-linux:
    name: Docker Linux (${{ matrix.python-version }} ${{ matrix.docker-platform }} ${{ matrix.python-os-distro }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        docker-platform: [linux/amd64, linux/arm64]
        python-os-distro: [slim-bullseye, slim-buster]
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Docker Build
        uses: docker/build-push-action@v3
        # https://github.com/docker/build-push-action/#inputs
        with:
          context: .
          file: tests/Dockerfile
          platforms: "${{ matrix.docker-platform }}"
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
            OS_DISTRO=${{ matrix.python-os-distro }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-windows:
      name: Docker Windows
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v2
        - name: Docker Build
          run: |
            docker build -f tests/Dockerfile --build-arg OS_DISTRO=windowsservercore .

